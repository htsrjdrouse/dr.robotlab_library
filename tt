PQ-12_mount.scad://camera mount
PiZero.scad:	if (PiZeroVer != "1.2")	// Only 1.2 doesn't have camera header
RPiCam-OBJ2.scad:// Microscope Objective mount for Raspberry Pi camera
RPiCam-OBJ2.scad:smx = 8.45;  // camera sensor module, base part
RPiCam-OBJ2.scad:// PCB holding camera module v2.1
arducam-raspi.scad://import("arducam-camera-holder.stl");
bom_camera.scad://import("miuzei_camera_breadboard_screwstub.stl");
bom_camera.scad:module wheel_camera_assay(){
bom_camera.scad:import("miuzei_camera_breadboard_screwstub.stl");
bom_camera.scad:translate([-32,-5,-58])rotate([-90,90,0])import("miuzei_camera_breadboard_a.stl");
bom_camera.scad:translate([-22+8,-9-12,-81])rotate([90,90,0])import("miuzei_camera_breadboard_b.stl");
bom_camera.scad:translate([0,0,-9*9])import("miuzei_camera_breadboard_screwstub.stl");
bom_camera.scad:module miuzei_camera_breadboard_screwstub(){
bom_camera.scad:camera_corexy_linear();
bom_camera.scad:module camera_corexy_linear(){
bom_complete.scad:include <bom_openmv_camera.scad>
bom_complete.scad://miuzei_camera_module();
bom_complete.scad://multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_complete.scad://multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_complete.scad://rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
bom_complete.scad://rotate([90,0,90])color("")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
bom_complete.scad:translate([-20,5,60])rotate([0,0,180])miuzei_camera_module();
bom_complete.scad:translate([0,0,-13.5])multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_complete.scad://translate([0,0,-13.5])multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_complete.scad://miuzei_camera_module();
bom_complete.scad:rotate([0,90,0])miuzei_camera_breadboard_screwstub_gesimtip();
bom_complete.scad:rotate([0,90,0])miuzei_camera_breadboard_screwstub_gesimtip();
bom_complete.scad://rotate([0,90,0])miuzei_camera_breadboard_screwstub_gesimtip();
bom_complete.scad://miuzei_camera_curtain();
bom_complete.scad://miuzei_camera_curtain_support_stroboscope();
bom_complete.scad://translate([-30,0,0])mirror([1,0,0])miuzei_camera_curtain_support_stroboscope();
bom_complete.scad:module miuzei_camera_curtain(){
bom_complete.scad:module miuzei_camera_curtain_support(){
bom_complete.scad:module miuzei_camera_curtain_support_stroboscope(){
bom_complete.scad://translate([0,0,-13.5])multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_complete.scad:rotate([0,90,0])miuzei_camera_breadboard_screwstub_gesimtip();
bom_complete.scad://translate([-11.5+3.8+(9*5),80-1.5+0.5,-50+10-1.3])rotate([0,90,0])color("pink")miuzei_camera_breadboard_screwstub();
bom_complete.scad://miuzei_camera_module();
bom_complete.scad://miuzei_camera_module();
bom_complete.scad://zdrive_camera_assy();
bom_complete.scad://rotate([0,90,0])miuzei_camera_breadboard_a();
bom_complete.scad://import("BOM_inventory/build3/stls/miuzei_camera_breadboard_a.stl");
bom_complete.scad://rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
bom_complete.scad://translate([0,0,11])rotate([0,90,0])miuzei_camera_breadboard_b();
bom_complete.scad://rotate([-90,0,0])multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_complete.scad://translate([0-26-18,90-13.5,-50-13+5])rotate([-90,0,-90])miuzei_camera_breadboard();
bom_complete.scad:module zdrive_camera_assy(){
bom_complete.scad://translate([-11.5+3.8+(9*5),80-1.5+0.5,-50+10-1.3])rotate([0,90,0])color("pink")miuzei_camera_breadboard_screwstub();
bom_complete.scad:translate([-11.5+3.8+(9*5),80-1.5+0.5,-50+10-1.3])rotate([0,90,0])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
bom_complete.scad://translate([-11.5+3.8-(9*4),80-1.5+0.5,-50+10-1.3])rotate([0,90,0])color("pink")miuzei_camera_breadboard_screwstub();
bom_complete.scad:translate([-11.5+3.8-(9*4),80-1.5+0.5,-50+10-1.3])rotate([0,90,0])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
bom_complete.scad:translate([0-26-18,90-13.5,-50-13+5])rotate([-90,0,-90])miuzei_camera_breadboard();
bom_complete.scad:rotate([-90,0,0])multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_complete.scad://translate([190,52,420])rotate([180,0,90])color([160/255,160/255,160/255])camera_assy();
bom_complete2.scad:include <bom_openmv_camera.scad>
bom_complete2.scad:miuzei_camera_module();
bom_gantry.scad:include<bom_camera.scad>
bom_gantry.scad://multichannel_cameramount_tslot_part();
bom_gantry.scad://multichannel_cameramount_tslot_part();
bom_gantry.scad://multichannel_cameramount_tipholder(10);
bom_gantry.scad://multichannel_cameramount_tslot_part();
bom_gantry.scad://translate([0,z-29,0])color("pink")multichannel_cameramount_tslot_part();
bom_gantry.scad://translate([0,z-29+13,5])multichannel_cameramount_tipholder(40);
bom_gantry.scad://translate([0,z-29,0])multichannel_cameramount_tipholder(40);
bom_gantry.scad://multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_gantry.scad://multichannel_pipette_holder_camera_example(30);
bom_gantry.scad://wheel_camera_assay();
bom_gantry.scad://multichannel_cameramount_tslot_part();
bom_gantry.scad://multichannel_cameramount.scad
bom_gantry.scad://translate([50-10-20+x+121.5,200-14+y-100-10,279])rotate([180,90,0])wheel_camera_assay(tz);
bom_gantry.scad://translate([190,52,420])rotate([180,0,90])color([160/255,160/255,160/255])camera_assy();
bom_multichannel.scad://this one is the camera mount one
bom_multichannel.scad://This is envisioning the camera mount
bom_multichannel.scad://translate([-11.5+3.8+(9*5),80-1.5+0.5,-50+10-1.3])rotate([0,90,0])color("pink")miuzei_camera_breadboard_screwstub();
bom_multichannel.scad:translate([0,0,-13.5])multichannel_pipette_holder_linear_actuator_connect_cameramount();
bom_multichannel.scad:translate([-20,5,60])rotate([0,0,180])miuzei_camera_module();
bom_multichannel.scad:translate([-11.5+3.8+(9*5)-10+1+9,80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
bom_multichannel.scad:translate([-11.5+3.8+(9*5)-10+1+9-(9*9),80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
bom_multichannel.scad:translate([0-26-18,90-13.5-20+1,-50-13+5+120])rotate([-0,90,-0])miuzei_camera_breadboard();
bom_multichannel.scad:module miuzei_camera_module(){
bom_multichannel.scad:rotate([0,90,0])miuzei_camera_breadboard_a();
bom_multichannel.scad://import("BOM_inventory/build3/stls/miuzei_camera_breadboard_a.stl");
bom_multichannel.scad:rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
bom_multichannel.scad://translate([0,0,11])rotate([0,90,0])miuzei_camera_breadboard_b();
bom_multichannel.scad:translate([-11.5+3.8+(9*5)-10+1+9+3,80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
bom_multichannel.scad:translate([-11.5+3.8+(9*5)-10+1+9-(9*9),80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
bom_multichannel.scad://translate([0-26-18,90-13.5-20+1,-50-13+5+120])rotate([-0,90,-0])miuzei_camera_breadboard();
bom_multichannel.scad:rotate([0,90,0])miuzei_camera_breadboard_a();
bom_multichannel.scad:translate([0,0,-4])rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
bom_multichannel.scad:module multichannel_pipette_holder_linear_actuator_connect_cameramount(){
bom_multichannel.scad: translate([-65,29,60])rotate([-90,0,0]) multichannel_pipette_holder_camera_example();
bom_multichannel.scad:module multichannel_pipette_holder_camera_example(){
bom_openmv_camera.scad://translate([0,0,0])color("pink")import("camera_front_box_v003.stl");
bom_openmv_camera.scad:module miuzei_camera_breadboard(){
bom_openmv_camera.scad:module miuzei_camera_breadboard_a(){
bom_openmv_camera.scad:module miuzei_camera_breadboard_b(){
bom_openmv_camera.scad:module miuzei_camera_breadboard_screwstub_gesimtip(){
bom_openmv_camera.scad:module miuzei_camera_breadboard_screwstub(){
bom_openmv_camera.scad://translate([-70,36-20,-2])rotate([0,0,0])openmv_camera_base();
bom_openmv_camera.scad://translate([0,0,-2])openmv_camera_lensmount();
bom_openmv_camera.scad://translate([0,0,-2])openmv_camera_lensmount_lensepart();
bom_openmv_camera.scad://rotate([-90,0,180])color("pink")openmv_camera_mnt_zbed();
bom_openmv_camera.scad://raspicamera_assy();
bom_zbed.scad://openmv_camera_mnt_zbed();
cytokinetics.scad:include <bom_openmv_camera.scad>
cytokinetics.scad:translate([60,95,20+15])rotate([0,0,180])dual_camera_assy();
cytokinetics.scad:translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
cytokinetics.scad://translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
cytokinetics.scad://translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
cytokinetics.scad://color("lime")translate([80,19.5+138/2+7.5,20-11])rotate([0,90,0])miuzei_camera_breadboard_b();
cytokinetics.scad://translate([120.5,81,20+15])dual_camera_assy();
cytokinetics.scad://translate([120,80,20+15])dual_camera_stand();
cytokinetics.scad://miuzei_camera_breadboard_b();
cytokinetics.scad://translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
cytokinetics.scad://color("lime")translate([80,19.5+138/2+7.5,20-11])rotate([0,90,0])miuzei_camera_breadboard_b();
cytokinetics.scad://translate([120.5,81,20+15])dual_camera_assy();
cytokinetics.scad://translate([120,80,20+15])dual_camera_stand();
cytokinetics.scad:rfid_camera_connector();
cytokinetics.scad:rfid_camera_module();
cytokinetics.scad:module dual_camera_assy(){
cytokinetics.scad:module dual_camera_stand(){
cytokinetics.scad:translate([60,95,20+15])rotate([0,0,180])dual_camera_assy();
cytokinetics.scad:translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
cytokinetics.scad://color("lime")translate([80,19.5+138/2+7.5,20-11])rotate([0,90,0])miuzei_camera_breadboard_b();
cytokinetics.scad:module miuzei_camera_breadboard_b(){
cytokinetics.scad://waterproof_camera_square_tube(10);
cytokinetics.scad://rfid_camera_connector();
cytokinetics.scad://rfid_camera_module();
cytokinetics.scad:module rfid_camera_standoff(){
cytokinetics.scad:module rfid_camera_module(){
cytokinetics.scad:module rfid_camera_connector(){
cytokinetics.scad://camera_65mm_mount_tslotstand();
cytokinetics.scad://waterproof_camera_square_tube(10);
cytokinetics.scad://camera_65mm_mount_tslotstand();
cytokinetics.scad://waterproof_camera(15);
cytokinetics.scad://waterproof_camera_square_tube(0);
cytokinetics.scad:module waterproof_camera_square_tube(ang){
cytokinetics.scad:translate([0,0,3])rotate([90,0,ang])camera_65mm_mount();
cytokinetics.scad:translate([0,0,3+5])rotate([90,0,ang])camera_65mm_mount_disc_square();
cytokinetics.scad:translate([0,0,3+5+153-94])rotate([-90,0,ang])camera_65mm_mount_disc_square();
cytokinetics.scad:translate([0,0,37])color("")camera_65mm_mount_tslotstand();
cytokinetics.scad:module waterproof_camera(ang){
cytokinetics.scad:translate([0,0,3])rotate([90,0,ang])camera_65mm_mount();
cytokinetics.scad:translate([0,0,3+5])rotate([90,0,ang])camera_65mm_mount_disc();
cytokinetics.scad:translate([0,0,37])color("")camera_65mm_mount_tslotstand();
cytokinetics.scad://translate([120+40,359+50,10])cage_miuzei_camera_module();
cytokinetics.scad://translate([120+40,359+50,10])cage_miuzei_camera_module();
cytokinetics.scad://translate([0,0,3])rotate([0,0,0])camera_65mm_mount();
cytokinetics.scad:translate([0,0,3])rotate([90,0,0])camera_65mm_mount();
cytokinetics.scad:color("pink")camera_65mm_mount_tslotstand();
cytokinetics.scad:translate([0,0,3])rotate([90,0,0])camera_65mm_mount();
cytokinetics.scad:waterproof_camera_case();
cytokinetics.scad:module waterproof_camera_case(){
cytokinetics.scad:module camera_65mm_mount_tslotstand(){
cytokinetics.scad:module camera_65mm_mount_disc_square(){
cytokinetics.scad:module camera_65mm_mount_disc(){
cytokinetics.scad:module camera_65mm_mount(){
cytokinetics.scad://camera_65mm_mount_disc();
cytokinetics.scad:translate([-9,60,30])rotate([0,0,-90])waterproof_camera(15);
cytokinetics.scad:translate([-9+150,-22,30])rotate([0,0,0])waterproof_camera(15);
cytokinetics.scad:module cage_miuzei_camera_module(){
cytokinetics.scad://rotate([0,90,0])miuzei_camera_breadboard_a();
cytokinetics.scad://import("BOM_inventory/build3/stls/miuzei_camera_breadboard_a.stl");
cytokinetics.scad://rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
cytokinetics.scad://translate([0,0,11])rotate([0,90,0])miuzei_camera_breadboard_b();
cytokinetics.scad:translate([-11.5+3.8+(9*5)-10+1+9+3,80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
cytokinetics.scad:translate([-11.5+3.8+(9*5)-10+1+9-(9*9),80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
cytokinetics.scad://translate([0-26-18,90-13.5-20+1,-50-13+5+120])rotate([-0,90,-0])miuzei_camera_breadboard();
cytokinetics.scad:rotate([0,90,0])miuzei_camera_breadboard_a();
cytokinetics.scad:translate([0,0,-4])rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
dr.robotlab_repstrap.scad:include <raspicamera_mounts_prisms.scad>
dr.robotlab_repstrap.scad://camera mount
dr.robotlab_repstrap.scad:import("3dprinting/raspi_camera_assy.stl");
good.modparts.scad://openmv_camera_base_justclip_otherend();
good.modparts.scad://translate([-200,36-25+1.5,4])rotate([0,0,0])openmv_camera_base();
good.modparts.scad:translate([29,10-3,151.85])rotate([0,180,0])openmv_camera_mnt_zbed();
good.modparts.scad:translate([-80,90,13])openmv_camera_base_justclip_otherend();
good.modparts.scad:translate([-70,36-20,-2])rotate([0,0,0])openmv_camera_base();
good.modparts.scad:translate([0,0,-2])openmv_camera_lensmount();
good.modparts.scad:translate([0,0,-2])openmv_camera_lensmount_lensepart();
good.modparts.scad://translate([0,36-25+1.5,4])rotate([0,0,0])openmv_camera_base();
good.modparts.scad: //translate([0,36-25+1.5,4])rotate([0,0,0])openmv_camera_base();
good.modparts.scad://translate([-200,36-25+1.5,4])rotate([0,180,0])openmv_camera_base();
good.modparts.scad://openmv_camera_base_justclip_otherend_cylinder();
good.modparts.scad://openmv_camera_lensmount();
good.modparts.scad://translate([0,0,10])openmv_camera_base();
good.modparts.scad://raspicamera_assy();
good.modparts.scad://camera_assy();
good.modparts.scad://camera_assy();
good.modparts.scad://openmv_camera_lensmount();
good.modparts.scad:module openmv_camera_base_justclip_otherend(){
good.modparts.scad:module openmv_camera_base_justclip_otherend_cylinder(){
good.modparts.scad:module openmv_camera_base_justclip(){
good.modparts.scad:module openmv_camera_base(){
good.modparts.scad:module openmv_camera_lensmount_lensepart(){
good.modparts.scad:module openmv_camera_lensmount(){
good.modparts.scad://openmv_camera_lensmount_lensepart();
good.modparts.scad:module openmv_camera_lensmount(){
good.modparts.scad://openmv_camera_base_justclip();
good.modparts.scad://translate([64,-5,0])openmv_camera_base();
good.modparts.scad:translate([0,-6,0])openmv_camera_lensmount();
good.modparts.scad://translate([190,52,420])rotate([180,0,90])color([160/255,160/255,160/255])camera_assy();
good.modparts.scad:color(col)translate([0,36-25,0])openmv_camera_lensmount();
good.modparts.scad:color(col)translate([-200,36-25+1.5,4])rotate([0,180,0])openmv_camera_base();
good.modparts.scad:color(col)translate([-7,48,20])rotate([-90,0,0])openmv_camera_base_justclip_otherend();
good.modparts.scad:translate([0,36-25,0])color("gainsboro")openmv_camera_lensmount();
good.modparts.scad:translate([-200,36-25+1.5,4])rotate([0,180,0])openmv_camera_base();
good.modparts.scad:module openmv_camera_mnt_zbed(){
good.modparts.scad:color("grey")openmv_camera_mnt_zbed();
good.modparts.scad://translate([190,52,420])rotate([180,0,90])color([160/255,160/255,160/255])camera_assy();
good.modparts.scad://usb for head camera
good.modparts.scad://usb for head camera
imagingsource.scad://translate([-155,0,5])rotate([180,0,0])camera_assy();
imagingsource.scad://camera_assy();
imagingsource.scad:module camera_assy(){
labautobox.scad:include <bom_openmv_camera.scad>
labautobox.scad://miuzei_camera_breadboard_b();
labautobox.scad:rfid_camera_connector();
labautobox.scad:rfid_camera_module();
labautobox.scad://translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
labautobox.scad://color("lime")translate([80,19.5+138/2+7.5,20-11])rotate([0,90,0])miuzei_camera_breadboard_b();
labautobox.scad://translate([120.5,81,20+15])dual_camera_assy();
labautobox.scad://translate([120,80,20+15])dual_camera_stand();
labautobox.scad://translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
labautobox.scad://color("lime")translate([80,19.5+138/2+7.5,20-11])rotate([0,90,0])miuzei_camera_breadboard_b();
labautobox.scad://translate([120.5,81,20+15])dual_camera_assy();
labautobox.scad://translate([120,80,20+15])dual_camera_stand();
labautobox.scad:module dual_camera_assy(){
labautobox.scad:module dual_camera_stand(){
labautobox.scad://translate([60,95,20+15])rotate([0,0,180])dual_camera_assy();
labautobox.scad://translate([60,95,20+15])rotate([0,0,180])dual_camera_stand();
labautobox.scad://color("lime")translate([80,19.5+138/2+7.5,20-11])rotate([0,90,0])miuzei_camera_breadboard_b();
labautobox.scad:module miuzei_camera_breadboard_b(){
labautobox.scad://waterproof_camera_square_tube(10);
labautobox.scad://rfid_camera_connector();
labautobox.scad://rfid_camera_module();
labautobox.scad:module rfid_camera_standoff(){
labautobox.scad:module rfid_camera_module(){
labautobox.scad:module rfid_camera_connector(){
labautobox.scad://camera_65mm_mount_tslotstand();
labautobox.scad://waterproof_camera_square_tube(10);
labautobox.scad://camera_65mm_mount_tslotstand();
labautobox.scad://waterproof_camera(15);
labautobox.scad://waterproof_camera_square_tube(0);
labautobox.scad:module waterproof_camera_square_tube(ang){
labautobox.scad:translate([0,0,3])rotate([90,0,ang])camera_65mm_mount();
labautobox.scad:translate([0,0,3+5])rotate([90,0,ang])camera_65mm_mount_disc_square();
labautobox.scad:translate([0,0,3+5+153-94])rotate([-90,0,ang])camera_65mm_mount_disc_square();
labautobox.scad:translate([0,0,37])color("")camera_65mm_mount_tslotstand();
labautobox.scad:module waterproof_camera(ang){
labautobox.scad:translate([0,0,3])rotate([90,0,ang])camera_65mm_mount();
labautobox.scad:translate([0,0,3+5])rotate([90,0,ang])camera_65mm_mount_disc();
labautobox.scad:translate([0,0,37])color("")camera_65mm_mount_tslotstand();
labautobox.scad://translate([120+40,359+50,10])cage_miuzei_camera_module();
labautobox.scad://translate([120+40,359+50,10])cage_miuzei_camera_module();
labautobox.scad://translate([0,0,3])rotate([0,0,0])camera_65mm_mount();
labautobox.scad:translate([0,0,3])rotate([90,0,0])camera_65mm_mount();
labautobox.scad:color("pink")camera_65mm_mount_tslotstand();
labautobox.scad:translate([0,0,3])rotate([90,0,0])camera_65mm_mount();
labautobox.scad:waterproof_camera_case();
labautobox.scad:module waterproof_camera_case(){
labautobox.scad:module camera_65mm_mount_tslotstand(){
labautobox.scad:module camera_65mm_mount_disc_square(){
labautobox.scad:module camera_65mm_mount_disc(){
labautobox.scad:module camera_65mm_mount(){
labautobox.scad://camera_65mm_mount_disc();
labautobox.scad:translate([-9,60,30])rotate([0,0,-90])waterproof_camera(15);
labautobox.scad:translate([-9+150,-22,30])rotate([0,0,0])waterproof_camera(15);
labautobox.scad:module cage_miuzei_camera_module(){
labautobox.scad://rotate([0,90,0])miuzei_camera_breadboard_a();
labautobox.scad://import("BOM_inventory/build3/stls/miuzei_camera_breadboard_a.stl");
labautobox.scad://rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
labautobox.scad://translate([0,0,11])rotate([0,90,0])miuzei_camera_breadboard_b();
labautobox.scad:translate([-11.5+3.8+(9*5)-10+1+9+3,80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
labautobox.scad:translate([-11.5+3.8+(9*5)-10+1+9-(9*9),80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
labautobox.scad://translate([0-26-18,90-13.5-20+1,-50-13+5+120])rotate([-0,90,-0])miuzei_camera_breadboard();
labautobox.scad:rotate([0,90,0])miuzei_camera_breadboard_a();
labautobox.scad:translate([0,0,-4])rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
modparts.scad://openmv_camera_base_justclip_otherend();
modparts.scad://translate([-200,36-25+1.5,4])rotate([0,0,0])openmv_camera_base();
modparts.scad:translate([29,10-3,151.85])rotate([0,180,0])openmv_camera_mnt_zbed();
modparts.scad:translate([-80,90,13])openmv_camera_base_justclip_otherend();
modparts.scad:translate([-70,36-20,-2])rotate([0,0,0])openmv_camera_base();
modparts.scad:translate([0,0,-2])openmv_camera_lensmount();
modparts.scad:translate([0,0,-2])openmv_camera_lensmount_lensepart();
modparts.scad://translate([0,36-25+1.5,4])rotate([0,0,0])openmv_camera_base();
modparts.scad: //translate([0,36-25+1.5,4])rotate([0,0,0])openmv_camera_base();
modparts.scad://translate([-200,36-25+1.5,4])rotate([0,180,0])openmv_camera_base();
modparts.scad://openmv_camera_base_justclip_otherend_cylinder();
modparts.scad://openmv_camera_lensmount();
modparts.scad://translate([0,0,10])openmv_camera_base();
modparts.scad://raspicamera_assy();
modparts.scad://camera_assy();
modparts.scad://camera_assy();
modparts.scad://openmv_camera_lensmount();
modparts.scad:module openmv_camera_base_justclip_otherend(){
modparts.scad:module openmv_camera_base_justclip_otherend_cylinder(){
modparts.scad:module openmv_camera_base_justclip(){
modparts.scad:module openmv_camera_base(){
modparts.scad:module openmv_camera_lensmount_lensepart(){
modparts.scad:module openmv_camera_lensmount(){
modparts.scad://openmv_camera_lensmount_lensepart();
modparts.scad:module openmv_camera_lensmount(){
modparts.scad://openmv_camera_base_justclip();
modparts.scad://translate([64,-5,0])openmv_camera_base();
modparts.scad:translate([0,-6,0])openmv_camera_lensmount();
modparts.scad://translate([190,52,420])rotate([180,0,90])color([160/255,160/255,160/255])camera_assy();
modparts.scad:color(col)translate([0,36-25,0])openmv_camera_lensmount();
modparts.scad:color(col)translate([-200,36-25+1.5,4])rotate([0,180,0])openmv_camera_base();
modparts.scad:color(col)translate([-7,48,20])rotate([-90,0,0])openmv_camera_base_justclip_otherend();
modparts.scad:translate([0,36-25,0])color("")openmv_camera_lensmount();
modparts.scad:translate([-200,36-25+1.5,4])rotate([0,180,0])openmv_camera_base();
modparts.scad:module openmv_camera_mnt_zbed(){
modparts.scad:color("grey")openmv_camera_mnt_zbed();
modparts.scad://translate([190,52,420])rotate([180,0,90])color([160/255,160/255,160/255])camera_assy();
modparts.scad://usb for head camera
modparts.scad://usb for head camera
multichannel_cameramount.scad://multichannel_cameramount.scad
multichannel_cameramount.scad://multichannel_pipette_holder_camera_example();
multichannel_cameramount.scad://multichannel_pipette_holder_linear_actuator_connect_cameramount();
multichannel_cameramount.scad://multichannel_pipette_holder_linear_actuator_connect_cameramount();
multichannel_cameramount.scad:module multichannel_cameramount_tslot_part(){
multichannel_cameramount.scad:multichannel_pipette_holder_linear_actuator_connect_cameramount();
multichannel_cameramount.scad:module multichannel_cameramount_tipholder(z){
multichannel_cameramount.scad:  translate([-65,29,60])rotate([-90,0,0]) multichannel_pipette_holder_camera_example(z);
multichannel_cameramount.scad:module multichannel_pipette_holder_linear_actuator_connect_cameramount(){
multichannel_cameramount.scad: //multichannel_cameramount_tipholder();
multichannel_cameramount.scad:module multichannel_pipette_holder_camera_example(z){
pipette_tip.scad://translate([90-0,-50+15,20+10])rotate([90,0,90])camera_view();
pipette_tip.scad:module camera_view(){
raspi_camera_case.scad:// Un-official (China source) M12 mount 36 x 36 mm RPi-compatible camera
raspi_camera_case.scad:// (search "raspberry camera board M12x0.5 lens" on Ebay)
raspi_camera_case.scad:CBW = 36.1; // width of camera PCB (x)
raspi_camera_case.scad:CBL = 36.1; // length of camera PCB (y)
raspi_camera_case.scad:CBH = 1.63; // thickness of camera PCB
raspi_camera_case.scad:CBBH = 2.9-CBH; // camera PCB bottom component keep-out height
raspi_camera_case.scad:CMW = 17.3; // camera module width
raspi_camera_case.scad:CML = 17.75; // camera module length
raspi_camera_case.scad:CMH = 9.1-CBH; // camera module height
raspi_camera_case.scad:CMMW = 23.6;  // camera module mounting ears shape width
raspi_camera_case.scad:CMML = 4.8; // camera module mounting ears shape length
raspi_camera_case.scad:CMLH = 12.2 - CBH; // camera module lens barrel height
raspi_camera_case.scad:CMLOD = 16.6; // camera module lens barrel OD
raspi_camera_case.scad:CMCW = 7.6;  // camera module flex cable connector width
raspi_camera_case.scad:CMCH = 3.4-CBH; // camera module FC connector height
raspi_camera_case.scad:LOD = 12.0; // M12x0.5 camera lens barrel OD
raspi_camera_case.scad:LL = 12.5; // M12x0.5 camera lens barrel length
raspi_camera_case.scad:   color("grey") translate([0,0,CBH+(CMH/2)]) cube([CMW-3,CML-cut,10],center=true); // base of camera module
raspi_camera_case.scad:   color("grey") translate([0,0,CBH+(CMH/2)]) cube([CMW-3,CML-cut,10+height],center=true); // base of camera module
raspi_camera_case.scad:		cube([CMW,CML,CMH],center=true); // base of camera module
raspi_camera_case.scad:module CamAssy() { // model of M12 camera board
raspi_camera_case.scad:// == HOUSING for 36x36mm M12-lens camera board  ==
raspi_camera_case.scad:CCW = 40; // camera housing width (x axis)
raspi_camera_case.scad:CCL = 40; // camera housing length (y axis)
raspi_camera_case.scad:CCBD = 4; // camera housing back depth (z axis)
raspi_camera_case.scad:CCBF = 2.6; // camera housing back front lip height (z axis)
raspi_camera_case.scad:      // CamAssy();  // camera board assembly w/lens, flex cable
raspi_camera_case.scad:// == Front part of camera housing
raspi_camera_case.scad:CCFH = 10.3+5; // height of camera case front part
raspi_camera_case.scad:CCFZoff = 2.6; // z-offset of camera case front
raspi_camera_case.scad:CCFT = 1.75; // thickness of camera case front
raspi_camera_case.scad:// mounting screw bosses in 4 corners of camera back
raspi_camera_case.scad:// ==  U-bracket (pan-tilt motion) for camera case
raspi_camera_case.scad:		cylinder(d=MHOD,h=200,$fn=20); // camera pivot (horizontal)
raspi_camera_case.scad:// CamAssy();  // just the M12 camera board model
raspicam_mount_flash_2_1_arducam.scad:// http://violettes.org/wiki/doku.php?id=camera
raspicam_mount_flash_2_1_arducam.scad://  version 2.1 : - ouverture débouchante D15 ald D14 pour la camera
raspicamera_mounts_prisms.scad:include <raspi_camera_case.scad>
raspicamera_mounts_prisms.scad://raspicamera_assy();
raspicamera_mounts_prisms.scad:module raspicamera_assy(){
raspicamera_mounts_prisms.scad://HERE IS THE BEAUTIFUL RASPICAMERA (raspicamera) ASSEMBLY
raspicamera_mounts_prisms.scad:/*ranslate([0,28+5,2])cameraprismholder();
raspicamera_mounts_prisms.scad:cameraprismholdercap();
raspicamera_mounts_prisms.scad:cameraprismholdercap();
raspicamera_mounts_prisms.scad://awesomecamera_assy();
raspicamera_mounts_prisms.scad:module cameraprismholder(){
raspicamera_mounts_prisms.scad:module cameraprismholdercap(){
xgantry_modular_fix.scad:include <multichannel_cameramount.scad>
xgantry_modular_fix.scad://multichannel_cameramount_tslot_part();
xgantry_modular_fix.scad://multichannel_cameramount_tipholder();
xgantry_modular_fix.scad:include <bom_openmv_camera.scad>
xgantry_modular_fix.scad://translate([-20.5-50,130+0.75+30,370.75-37])rotate([90,0,-90])multichannel_pipette_holder_linear_actuator_connect_cameramount();
xgantry_modular_fix.scad://translate([-20.5-50,130+0.75+30,370.75-37])rotate([90,0,-90])multichannel_pipette_holder_linear_actuator_connect_cameramount();
xgantry_modular_fix.scad:multichannel_cameramount_tslot_part();
xgantry_modular_fix.scad://translate([0,-0,10])multichannel_cameramount_tipholder();
xgantry_modular_fix.scad:multichannel_cameramount_tslot_part();
xgantry_modular_fix.scad://translate([0,z-29,0])color("lime")multichannel_cameramount_tslot_part();
xgantry_modular_fix.scad://translate([0,z-11-5.25,0+5])multichannel_cameramount_tipholder(z);
xgantry_modular_fix.scad:translate([0,z-29,0])color("lime")multichannel_cameramount_tslot_part();
xgantry_modular_fix.scad:translate([0,z-11-5.25,0+5])multichannel_cameramount_tipholder(z);
xgantry_modular_fix.scad://translate([0,z-29,0])color("lime")multichannel_cameramount_tslot_part();
xgantry_modular_fix.scad://translate([0,z-11-5.25,0+5])multichannel_cameramount_tipholder(z);
xgantry_modular_fix.scad://color("pink")multichannel_cameramount_tslot_part();
xgantry_modular_fix.scad://translate([0,z-29,0])multichannel_cameramount_tipholder();
xgantry_modular_fix.scad://camera_65mm_mount_tslotstand();
xgantry_modular_fix.scad://waterproof_camera(15);
xgantry_modular_fix.scad://waterproof_camera_square_tube(0);
xgantry_modular_fix.scad://translate([-40,-2,3+5])rotate([0,0,90])camera_65mm_mount_disc_square();
xgantry_modular_fix.scad:module waterproof_camera_square_tube(ang){
xgantry_modular_fix.scad:translate([0,0,3])rotate([90,0,ang])camera_65mm_mount();
xgantry_modular_fix.scad:translate([0,0,3+5])rotate([90,0,ang])camera_65mm_mount_disc_square();
xgantry_modular_fix.scad:translate([0,0,37])color("")camera_65mm_mount_tslotstand();
xgantry_modular_fix.scad:module waterproof_camera(ang){
xgantry_modular_fix.scad:translate([0,0,3])rotate([90,0,ang])camera_65mm_mount();
xgantry_modular_fix.scad:translate([0,0,3+5])rotate([90,0,ang])camera_65mm_mount_disc();
xgantry_modular_fix.scad:translate([0,0,37])color("")camera_65mm_mount_tslotstand();
xgantry_modular_fix.scad://translate([120+40,359+50,10])cage_miuzei_camera_module();
xgantry_modular_fix.scad://translate([120+40,359+50,10])cage_miuzei_camera_module();
xgantry_modular_fix.scad://translate([0,0,3])rotate([0,0,0])camera_65mm_mount();
xgantry_modular_fix.scad:translate([0,0,3])rotate([90,0,0])camera_65mm_mount();
xgantry_modular_fix.scad:color("pink")camera_65mm_mount_tslotstand();
xgantry_modular_fix.scad:translate([0,0,3])rotate([90,0,0])camera_65mm_mount();
xgantry_modular_fix.scad:waterproof_camera_case();
xgantry_modular_fix.scad:module waterproof_camera_case(){
xgantry_modular_fix.scad:module camera_65mm_mount_tslotstand(){
xgantry_modular_fix.scad:module camera_65mm_mount_disc_square(){
xgantry_modular_fix.scad:module camera_65mm_mount_disc(){
xgantry_modular_fix.scad:module camera_65mm_mount(){
xgantry_modular_fix.scad://camera_65mm_mount_disc();
xgantry_modular_fix.scad:translate([-9,60,30])rotate([0,0,-90])waterproof_camera(15);
xgantry_modular_fix.scad:translate([-9+150,-22,30])rotate([0,0,0])waterproof_camera(15);
xgantry_modular_fix.scad:module cage_miuzei_camera_module(){
xgantry_modular_fix.scad://rotate([0,90,0])miuzei_camera_breadboard_a();
xgantry_modular_fix.scad://import("BOM_inventory/build3/stls/miuzei_camera_breadboard_a.stl");
xgantry_modular_fix.scad://rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
xgantry_modular_fix.scad://translate([0,0,11])rotate([0,90,0])miuzei_camera_breadboard_b();
xgantry_modular_fix.scad:translate([-11.5+3.8+(9*5)-10+1+9+3,80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
xgantry_modular_fix.scad:translate([-11.5+3.8+(9*5)-10+1+9-(9*9),80-1.5+0.5-20-17-0.75,-50+10-1.3+100+7])rotate([90,0,90])color("pink")import("BOM_inventory/build2/stls/miuzei_camera_breadboard_screwstub.stl");
xgantry_modular_fix.scad://translate([0-26-18,90-13.5-20+1,-50-13+5+120])rotate([-0,90,-0])miuzei_camera_breadboard();
xgantry_modular_fix.scad:rotate([0,90,0])miuzei_camera_breadboard_a();
xgantry_modular_fix.scad:translate([0,0,-4])rotate([0,180,0])import("BOM_inventory/build3/stls/miuzei_camera_breadboard_b.stl");
